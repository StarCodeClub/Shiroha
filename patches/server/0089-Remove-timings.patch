From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Wed, 21 Dec 2022 20:20:49 +0800
Subject: [PATCH] Remove timings


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 67980e1dc186c0b458eca9f00acfea7d2b26d575..01eb41a8e07af08c89c380c029f4ca2e1a45fd19 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -15,46 +15,46 @@ import java.util.Map;
 // TODO: Re-implement missing timers
 public final class MinecraftTimings {
 
-    public static final Timing serverOversleep = Timings.ofSafe("Server Oversleep");
-    public static final Timing midTickChunkTasks = Timings.ofSafe("Mid Tick Chunk Tasks");
-    public static final Timing playerListTimer = Timings.ofSafe("Player List");
-    public static final Timing commandFunctionsTimer = Timings.ofSafe("Command Functions");
-    public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
-    public static final Timing tickablesTimer = Timings.ofSafe("Tickables");
-    public static final Timing minecraftSchedulerTimer = Timings.ofSafe("Minecraft Scheduler");
-    public static final Timing bukkitSchedulerTimer = Timings.ofSafe("Bukkit Scheduler");
-    public static final Timing bukkitSchedulerPendingTimer = Timings.ofSafe("Bukkit Scheduler - Pending");
-    public static final Timing bukkitSchedulerFinishTimer = Timings.ofSafe("Bukkit Scheduler - Finishing");
-    public static final Timing chunkIOTickTimer = Timings.ofSafe("ChunkIOTick");
-    public static final Timing timeUpdateTimer = Timings.ofSafe("Time Update");
-    public static final Timing serverCommandTimer = Timings.ofSafe("Server Command");
-    public static final Timing savePlayers = Timings.ofSafe("Save Players");
-
-    public static final Timing tickEntityTimer = Timings.ofSafe("## tickEntity");
-    public static final Timing tickTileEntityTimer = Timings.ofSafe("## tickTileEntity");
-    public static final Timing packetProcessTimer = Timings.ofSafe("## Packet Processing");
-    public static final Timing scheduledBlocksTimer = Timings.ofSafe("## Scheduled Blocks");
-    public static final Timing structureGenerationTimer = Timings.ofSafe("Structure Generation");
-
-    public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
-    public static final Timing processTasksTimer = Timings.ofSafe("processTasks");
-
-    public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
-
-    public static final Timing entityActivationCheckTimer = Timings.ofSafe("entityActivationCheck");
-
-    public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
-    public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
-
-    public static final Timing scoreboardScoreSearch = Timings.ofSafe("Scoreboard score search"); // Tuinity - add timings for scoreboard search
-    public static final Timing distanceManagerTick = Timings.ofSafe("Distance Manager Tick"); // Tuinity - add timings for distance manager
+    public static final Timing serverOversleep = Timings.NULL_HANDLER;
+    public static final Timing midTickChunkTasks = Timings.NULL_HANDLER;
+    public static final Timing playerListTimer = Timings.NULL_HANDLER;
+    public static final Timing commandFunctionsTimer = Timings.NULL_HANDLER;
+    public static final Timing connectionTimer = Timings.NULL_HANDLER;
+    public static final Timing tickablesTimer = Timings.NULL_HANDLER;
+    public static final Timing minecraftSchedulerTimer = Timings.NULL_HANDLER;
+    public static final Timing bukkitSchedulerTimer = Timings.NULL_HANDLER;
+    public static final Timing bukkitSchedulerPendingTimer = Timings.NULL_HANDLER;
+    public static final Timing bukkitSchedulerFinishTimer = Timings.NULL_HANDLER;
+    public static final Timing chunkIOTickTimer = Timings.NULL_HANDLER;
+    public static final Timing timeUpdateTimer = Timings.NULL_HANDLER;
+    public static final Timing serverCommandTimer = Timings.NULL_HANDLER;
+    public static final Timing savePlayers = Timings.NULL_HANDLER;
+
+    public static final Timing tickEntityTimer = Timings.NULL_HANDLER;
+    public static final Timing tickTileEntityTimer = Timings.NULL_HANDLER;
+    public static final Timing packetProcessTimer = Timings.NULL_HANDLER;
+    public static final Timing scheduledBlocksTimer = Timings.NULL_HANDLER;
+    public static final Timing structureGenerationTimer = Timings.NULL_HANDLER;
+
+    public static final Timing processQueueTimer = Timings.NULL_HANDLER;
+    public static final Timing processTasksTimer = Timings.NULL_HANDLER;
+
+    public static final Timing playerCommandTimer = Timings.NULL_HANDLER;
+
+    public static final Timing entityActivationCheckTimer = Timings.NULL_HANDLER;
+
+    public static final Timing antiXrayUpdateTimer = Timings.NULL_HANDLER;
+    public static final Timing antiXrayObfuscateTimer = Timings.NULL_HANDLER;
+
+    public static final Timing scoreboardScoreSearch = Timings.NULL_HANDLER;
+    public static final Timing distanceManagerTick = Timings.NULL_HANDLER;
 
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
 
     public static Timing getInternalTaskName(String taskName) {
-        return Timings.ofSafe(taskName);
+        return Timings.NULL_HANDLER;
     }
 
     /**
@@ -64,48 +64,7 @@ public final class MinecraftTimings {
      * @return
      */
     public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
-        if (!bukkitTask.isSync()) {
-            return NullTimingHandler.NULL;
-        }
-        Plugin plugin;
-
-        CraftTask craftTask = (CraftTask) bukkitTask;
-
-        final Class<?> taskClass = craftTask.getTaskClass();
-        if (bukkitTask.getOwner() != null) {
-            plugin = bukkitTask.getOwner();
-        } else {
-            plugin = TimingsManager.getPluginByClassloader(taskClass);
-        }
-
-        final String taskname = taskNameCache.computeIfAbsent(taskClass, clazz -> {
-            try {
-                String clsName = !clazz.isMemberClass()
-                    ? clazz.getName()
-                    : clazz.getCanonicalName();
-                if (clsName != null && clsName.contains("$Lambda$")) {
-                    clsName = clsName.replaceAll("(Lambda\\$.*?)/.*", "$1");
-                }
-                return clsName != null ? clsName : "UnknownTask";
-            } catch (Throwable ex) {
-                new Exception("Error occurred detecting class name", ex).printStackTrace();
-                return "MangledClassFile";
-            }
-        });
-
-        StringBuilder name = new StringBuilder(64);
-        name.append("Task: ").append(taskname);
-        if (period > 0) {
-            name.append(" (interval:").append(period).append(")");
-        } else {
-            name.append(" (Single)");
-        }
-
-        if (plugin == null) {
-            return Timings.ofSafe(null, name.toString());
-        }
-
-        return Timings.ofSafe(plugin, name.toString());
+       return Timings.NULL_HANDLER;
     }
 
     /**
@@ -114,7 +73,7 @@ public final class MinecraftTimings {
      * @return
      */
     public static Timing getEntityTimings(String entityType, String type) {
-        return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType + " - " + type, tickEntityTimer);
+        return Timings.NULL_HANDLER;
     }
 
     /**
@@ -123,14 +82,13 @@ public final class MinecraftTimings {
      * @return
      */
     public static Timing getTileEntityTimings(TileEntity entity) {
-        String entityType = entity.getClass().getName();
-        return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
+        return Timings.NULL_HANDLER;
     }
     public static Timing getCancelTasksTimer() {
-        return Timings.ofSafe("Cancel Tasks");
+        return Timings.NULL_HANDLER;
     }
     public static Timing getCancelTasksTimer(Plugin plugin) {
-        return Timings.ofSafe(plugin, "Cancel Tasks");
+        return Timings.NULL_HANDLER;
     }
 
     public static void stopServer() {
@@ -138,7 +96,7 @@ public final class MinecraftTimings {
     }
 
     public static Timing getBlockTiming(Block block) {
-        return Timings.ofSafe("## Scheduled Block: " + block.toString(), scheduledBlocksTimer);
+        return Timings.NULL_HANDLER;
     }
 /*
     public static Timing getStructureTiming(StructureGenerator structureGenerator) {
@@ -146,10 +104,10 @@ public final class MinecraftTimings {
     }*/
 
     public static Timing getPacketTiming(Packet packet) {
-        return Timings.ofSafe("## Packet - " + packet.getClass().getName(), packetProcessTimer);
+        return Timings.NULL_HANDLER;
     }
 
     public static Timing getCommandFunctionTiming(CustomFunction function) {
-        return Timings.ofSafe("Command Function - " + function.getMinecraftKey().toString());
+        return Timings.NULL_HANDLER;
     }
 }
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index c5f594d45012016d99b83a778a2b9d20a7c086ac..b469bfa0a3ab4a0791fd54fcd866d7d63580b42e 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -73,71 +73,71 @@ public class WorldTimingsHandler {
     public WorldTimingsHandler(World server) {
         String name = ((WorldDataServer) server.getWorldData()).getName() + " - ";
 
-        mobSpawn = Timings.ofSafe(name + "mobSpawn");
-        doChunkUnload = Timings.ofSafe(name + "doChunkUnload");
-        scheduledBlocks = Timings.ofSafe(name + "Scheduled Blocks");
-        scheduledBlocksCleanup = Timings.ofSafe(name + "Scheduled Blocks - Cleanup");
-        scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
-        chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
-        lightChunk = Timings.ofSafe(name + "Light Chunk");
-        chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
-        doVillages = Timings.ofSafe(name + "doVillages");
-        doChunkMap = Timings.ofSafe(name + "doChunkMap");
-        doChunkMapUpdate = Timings.ofSafe(name + "doChunkMap - Update");
-        doChunkMapToUpdate = Timings.ofSafe(name + "doChunkMap - To Update");
-        doChunkMapSortMissing = Timings.ofSafe(name + "doChunkMap - Sort Missing");
-        doChunkMapSortSendToPlayers = Timings.ofSafe(name + "doChunkMap - Sort Send To Players");
-        doChunkMapPlayersNeedingChunks = Timings.ofSafe(name + "doChunkMap - Players Needing Chunks");
-        doChunkMapPendingSendToPlayers = Timings.ofSafe(name + "doChunkMap - Pending Send To Players");
-        doChunkMapUnloadChunks = Timings.ofSafe(name + "doChunkMap - Unload Chunks");
-        doSounds = Timings.ofSafe(name + "doSounds");
-        doChunkGC = Timings.ofSafe(name + "doChunkGC");
-        doPortalForcer = Timings.ofSafe(name + "doPortalForcer");
-        entityTick = Timings.ofSafe(name + "entityTick");
-        entityRemoval = Timings.ofSafe(name + "entityRemoval");
-        tileEntityTick = Timings.ofSafe(name + "tileEntityTick");
-        tileEntityPending = Timings.ofSafe(name + "tileEntityPending");
+        mobSpawn = Timings.NULL_HANDLER;
+        doChunkUnload = Timings.NULL_HANDLER;
+        scheduledBlocks = Timings.NULL_HANDLER;
+        scheduledBlocksCleanup = Timings.NULL_HANDLER;
+        scheduledBlocksTicking = Timings.NULL_HANDLER;
+        chunkTicks = Timings.NULL_HANDLER;
+        lightChunk = Timings.NULL_HANDLER;
+        chunkTicksBlocks = Timings.NULL_HANDLER;
+        doVillages = Timings.NULL_HANDLER;
+        doChunkMap = Timings.NULL_HANDLER;
+        doChunkMapUpdate = Timings.NULL_HANDLER;
+        doChunkMapToUpdate = Timings.NULL_HANDLER;
+        doChunkMapSortMissing = Timings.NULL_HANDLER;
+        doChunkMapSortSendToPlayers = Timings.NULL_HANDLER;
+        doChunkMapPlayersNeedingChunks = Timings.NULL_HANDLER;
+        doChunkMapPendingSendToPlayers = Timings.NULL_HANDLER;
+        doChunkMapUnloadChunks = Timings.NULL_HANDLER;
+        doSounds = Timings.NULL_HANDLER;
+        doChunkGC = Timings.NULL_HANDLER;
+        doPortalForcer = Timings.NULL_HANDLER;
+        entityTick = Timings.NULL_HANDLER;
+        entityRemoval = Timings.NULL_HANDLER;
+        tileEntityTick = Timings.NULL_HANDLER;
+        tileEntityPending = Timings.NULL_HANDLER;
 
-        chunkLoad = Timings.ofSafe(name + "Chunk Load");
-        chunkLoadPopulate = Timings.ofSafe(name + "Chunk Load - Populate");
-        syncChunkLoad = Timings.ofSafe(name + "Sync Chunk Load");
+        chunkLoad = Timings.NULL_HANDLER;
+        chunkLoadPopulate = Timings.NULL_HANDLER;
+        syncChunkLoad = Timings.NULL_HANDLER;
         chunkLoadLevelTimer = Timings.ofSafe(name + "Chunk Load - Load Level");
-        chunkIO = Timings.ofSafe(name + "Chunk Load - DiskIO");
-        chunkPostLoad = Timings.ofSafe(name + "Chunk Load - Post Load");
-        worldSave = Timings.ofSafe(name + "World Save");
-        worldSaveLevel = Timings.ofSafe(name + "World Save - Level");
-        worldSaveChunks = Timings.ofSafe(name + "World Save - Chunks");
-        chunkSaveData = Timings.ofSafe(name + "Chunk Save - Data");
+        chunkIO = Timings.NULL_HANDLER;
+        chunkPostLoad = Timings.NULL_HANDLER;
+        worldSave = Timings.NULL_HANDLER;
+        worldSaveLevel = Timings.NULL_HANDLER;
+        worldSaveChunks = Timings.NULL_HANDLER;
+        chunkSaveData = Timings.NULL_HANDLER;
 
-        tracker1 = Timings.ofSafe(name + "tracker stage 1");
-        tracker2 = Timings.ofSafe(name + "tracker stage 2");
-        doTick = Timings.ofSafe(name + "doTick");
-        tickEntities = Timings.ofSafe(name + "tickEntities");
+        tracker1 = Timings.NULL_HANDLER;
+        tracker2 = Timings.NULL_HANDLER;
+        doTick = Timings.NULL_HANDLER;
+        tickEntities = Timings.NULL_HANDLER;
 
-        chunks = Timings.ofSafe(name + "Chunks");
-        newEntities = Timings.ofSafe(name + "New entity registration");
-        raids = Timings.ofSafe(name + "Raids");
-        chunkProviderTick = Timings.ofSafe(name + "Chunk provider tick");
-        broadcastChunkUpdates = Timings.ofSafe(name + "Broadcast chunk updates");
-        countNaturalMobs = Timings.ofSafe(name + "Count natural mobs");
+        chunks = Timings.NULL_HANDLER;
+        newEntities = Timings.NULL_HANDLER;
+        raids = Timings.NULL_HANDLER;
+        chunkProviderTick = Timings.NULL_HANDLER;
+        broadcastChunkUpdates = Timings.NULL_HANDLER;
+        countNaturalMobs = Timings.NULL_HANDLER;
 
 
-        miscMobSpawning = Timings.ofSafe(name + "Mob spawning - Misc");
-        playerMobDistanceMapUpdate = Timings.ofSafe(name + "Per Player Mob Spawning - Distance Map Update");
+        miscMobSpawning = Timings.NULL_HANDLER;
+        playerMobDistanceMapUpdate = Timings.NULL_HANDLER;
 
-        poiUnload = Timings.ofSafe(name + "Chunk unload - POI");
-        chunkUnload = Timings.ofSafe(name + "Chunk unload - Chunk");
-        poiSaveDataSerialization = Timings.ofSafe(name + "Chunk save - POI Data serialization");
-        chunkSave = Timings.ofSafe(name + "Chunk save - Chunk");
-        chunkSaveOverwriteCheck = Timings.ofSafe(name + "Chunk save - Chunk Overwrite Check");
-        chunkSaveDataSerialization = Timings.ofSafe(name + "Chunk save - Chunk Data serialization");
-        chunkSaveIOWait = Timings.ofSafe(name + "Chunk save - Chunk IO Wait");
-        chunkUnloadPrepareSave = Timings.ofSafe(name + "Chunk unload - Async Save Prepare");
-        chunkUnloadPOISerialization = Timings.ofSafe(name + "Chunk unload - POI Data Serialization");
-        chunkUnloadDataSave = Timings.ofSafe(name + "Chunk unload - Data Serialization");
+        poiUnload = Timings.NULL_HANDLER;
+        chunkUnload = Timings.NULL_HANDLER;
+        poiSaveDataSerialization = Timings.NULL_HANDLER;
+        chunkSave = Timings.NULL_HANDLER;
+        chunkSaveOverwriteCheck = Timings.NULL_HANDLER;
+        chunkSaveDataSerialization = Timings.NULL_HANDLER;
+        chunkSaveIOWait = Timings.NULL_HANDLER;
+        chunkUnloadPrepareSave = Timings.NULL_HANDLER;
+        chunkUnloadPOISerialization = Timings.NULL_HANDLER;
+        chunkUnloadDataSave = Timings.NULL_HANDLER;
     }
 
     public static Timing getTickList(WorldServer worldserver, String timingsType) {
-        return Timings.ofSafe(((WorldDataServer) worldserver.getWorldData()).getName() + " - Scheduled " + timingsType);
+        return Timings.NULL_HANDLER;
     }
 }
