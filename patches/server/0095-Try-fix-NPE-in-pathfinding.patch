From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Thu, 22 Dec 2022 09:37:30 +0800
Subject: [PATCH] Try fix NPE in pathfinding


diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Path.java b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
new file mode 100644
index 0000000000000000000000000000000000000000..ebae4d1f47127000c92945cd3c2e1877110ec189
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
@@ -0,0 +1,123 @@
+package net.minecraft.world.level.pathfinder;
+
+public class Path {
+
+    private PathPoint[] a = new PathPoint[128];
+    private int b;
+
+    public synchronized PathPoint a(PathPoint pathpoint) {
+        if (pathpoint.d < 0) {
+            if (this.b == this.a.length) {
+                PathPoint[] apathpoint = new PathPoint[this.b << 1];
+                System.arraycopy(this.a, 0, apathpoint, 0, this.b);
+                this.a = apathpoint;
+            }
+            this.a[this.b] = pathpoint;
+            pathpoint.d = this.b;
+            this.a(this.b++);
+        }
+        return pathpoint;
+    }
+
+    public synchronized void a() {
+        this.b = 0;
+    }
+
+    public synchronized PathPoint c() {
+        PathPoint pathpoint = this.a[0];
+
+        this.a[0] = this.a[--this.b];
+        this.a[this.b] = null;
+        if (this.b > 0) {
+            this.b(0);
+        }
+
+        pathpoint.d = -1;
+        return pathpoint;
+    }
+
+    public synchronized void a(PathPoint pathpoint, float f) {
+        float f1 = pathpoint.g;
+
+        pathpoint.g = f;
+        if (f < f1) {
+            this.a(pathpoint.d);
+        } else {
+            this.b(pathpoint.d);
+        }
+
+    }
+
+    private void a(int i) {
+        PathPoint pathpoint = this.a[i];
+
+        int j;
+
+        for (float f = pathpoint.g; i > 0; i = j) {
+            j = i - 1 >> 1;
+            PathPoint pathpoint1 = this.a[j];
+
+            if (f >= pathpoint1.g) {
+                break;
+            }
+
+            this.a[i] = pathpoint1;
+            pathpoint1.d = i;
+        }
+
+        this.a[i] = pathpoint;
+        pathpoint.d = i;
+    }
+
+    private void b(int i) {
+        PathPoint pathpoint = this.a[i];
+        float f = pathpoint.g;
+
+        while (true) {
+            int j = 1 + (i << 1);
+            int k = j + 1;
+
+            if (j >= this.b) {
+                break;
+            }
+
+            PathPoint pathpoint1 = this.a[j];
+            float f1 = pathpoint1.g;
+            PathPoint pathpoint2;
+            float f2;
+
+            if (k >= this.b) {
+                pathpoint2 = null;
+                f2 = Float.POSITIVE_INFINITY;
+            } else {
+                pathpoint2 = this.a[k];
+                f2 = pathpoint2.g;
+            }
+
+            if (f1 < f2) {
+                if (f1 >= f) {
+                    break;
+                }
+
+                this.a[i] = pathpoint1;
+                pathpoint1.d = i;
+                i = j;
+            } else {
+                if (f2 >= f) {
+                    break;
+                }
+
+                this.a[i] = pathpoint2;
+                pathpoint2.d = i;
+                i = k;
+            }
+        }
+
+        this.a[i] = pathpoint;
+        pathpoint.d = i;
+    }
+
+    public synchronized boolean e() {
+        return this.b == 0;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathDestination.java b/src/main/java/net/minecraft/world/level/pathfinder/PathDestination.java
new file mode 100644
index 0000000000000000000000000000000000000000..34453f5476c72017560811bb7a712d6d71af1d74
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathDestination.java
@@ -0,0 +1,28 @@
+package net.minecraft.world.level.pathfinder;
+
+public class PathDestination extends PathPoint {
+
+    private float m = Float.MAX_VALUE;
+    private PathPoint n;
+    private boolean o;
+
+    public PathDestination(PathPoint pathpoint) {
+        super(pathpoint.a, pathpoint.b, pathpoint.c);
+    }
+
+    public void a(float f, PathPoint pathpoint) {
+        if (f < this.m) {
+            this.m = f;
+            this.n = pathpoint;
+        }
+
+    }
+
+    public PathPoint d() {
+        return this.n;
+    }
+
+    public void e() {
+        this.o = true;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathMode.java b/src/main/java/net/minecraft/world/level/pathfinder/PathMode.java
new file mode 100644
index 0000000000000000000000000000000000000000..710667ccf99a85719510b9da762bf97a30ca41e7
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathMode.java
@@ -0,0 +1,8 @@
+package net.minecraft.world.level.pathfinder;
+
+public enum PathMode {
+
+    LAND, WATER, AIR;
+
+    private PathMode() {}
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderFlying.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderFlying.java
new file mode 100644
index 0000000000000000000000000000000000000000..418ecd5026321e687ed69eb14b7eacb705540816
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderFlying.java
@@ -0,0 +1,343 @@
+package net.minecraft.world.level.pathfinder;
+
+import com.google.common.collect.Sets;
+import java.util.EnumSet;
+import java.util.Iterator;
+import java.util.Set;
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPosition;
+import net.minecraft.tags.Tag;
+import net.minecraft.tags.TagsBlock;
+import net.minecraft.util.MathHelper;
+import net.minecraft.world.entity.EntityInsentient;
+import net.minecraft.world.level.ChunkCache;
+import net.minecraft.world.level.IBlockAccess;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.IBlockData;
+
+public class PathfinderFlying extends PathfinderNormal {
+
+    public PathfinderFlying() {}
+
+    @Override
+    public void a(ChunkCache chunkcache, EntityInsentient entityinsentient) {
+        super.a(chunkcache, entityinsentient);
+        this.j = entityinsentient.a(PathType.WATER);
+    }
+
+    @Override
+    public void a() {
+        this.b.a(PathType.WATER, this.j);
+        super.a();
+    }
+
+    @Override
+    public PathPoint b() {
+        int i;
+
+        if (this.e() && this.b.isInWater()) {
+            i = MathHelper.floor(this.b.locY());
+            BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(this.b.locX(), (double) i, this.b.locZ());
+
+            for (Block block = this.a.getType(blockposition_mutableblockposition).getBlock(); block == Blocks.WATER; block = this.a.getType(blockposition_mutableblockposition).getBlock()) {
+                ++i;
+                blockposition_mutableblockposition.c(this.b.locX(), (double) i, this.b.locZ());
+            }
+        } else {
+            i = MathHelper.floor(this.b.locY() + 0.5D);
+        }
+
+        BlockPosition blockposition = this.b.getChunkCoordinates();
+        PathType pathtype = this.a(this.b, blockposition.getX(), i, blockposition.getZ());
+
+        if (this.b.a(pathtype) < 0.0F) {
+            Set<BlockPosition> set = Sets.newHashSet();
+
+            set.add(new BlockPosition(this.b.getBoundingBox().minX, (double) i, this.b.getBoundingBox().minZ));
+            set.add(new BlockPosition(this.b.getBoundingBox().minX, (double) i, this.b.getBoundingBox().maxZ));
+            set.add(new BlockPosition(this.b.getBoundingBox().maxX, (double) i, this.b.getBoundingBox().minZ));
+            set.add(new BlockPosition(this.b.getBoundingBox().maxX, (double) i, this.b.getBoundingBox().maxZ));
+            Iterator iterator = set.iterator();
+
+            while (iterator.hasNext()) {
+                BlockPosition blockposition1 = (BlockPosition) iterator.next();
+                PathType pathtype1 = this.a(this.b, blockposition1);
+
+                if (this.b.a(pathtype1) >= 0.0F) {
+                    return super.a(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
+                }
+            }
+        }
+
+        return super.a(blockposition.getX(), i, blockposition.getZ());
+    }
+
+    @Override
+    public PathDestination a(double d0, double d1, double d2) {
+        return new PathDestination(super.a(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2)));
+    }
+
+    @Override
+    public int a(PathPoint[] apathpoint, PathPoint pathpoint) {
+        int i = 0;
+        PathPoint pathpoint1 = this.a(pathpoint.a, pathpoint.b, pathpoint.c + 1);
+
+        if (this.b(pathpoint1)) {
+            apathpoint[i++] = pathpoint1;
+        }
+
+        PathPoint pathpoint2 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c);
+
+        if (this.b(pathpoint2)) {
+            apathpoint[i++] = pathpoint2;
+        }
+
+        PathPoint pathpoint3 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c);
+
+        if (this.b(pathpoint3)) {
+            apathpoint[i++] = pathpoint3;
+        }
+
+        PathPoint pathpoint4 = this.a(pathpoint.a, pathpoint.b, pathpoint.c - 1);
+
+        if (this.b(pathpoint4)) {
+            apathpoint[i++] = pathpoint4;
+        }
+
+        PathPoint pathpoint5 = this.a(pathpoint.a, pathpoint.b + 1, pathpoint.c);
+
+        if (this.b(pathpoint5)) {
+            apathpoint[i++] = pathpoint5;
+        }
+
+        PathPoint pathpoint6 = this.a(pathpoint.a, pathpoint.b - 1, pathpoint.c);
+
+        if (this.b(pathpoint6)) {
+            apathpoint[i++] = pathpoint6;
+        }
+
+        PathPoint pathpoint7 = this.a(pathpoint.a, pathpoint.b + 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint7) && this.a(pathpoint1) && this.a(pathpoint5)) {
+            apathpoint[i++] = pathpoint7;
+        }
+
+        PathPoint pathpoint8 = this.a(pathpoint.a - 1, pathpoint.b + 1, pathpoint.c);
+
+        if (this.b(pathpoint8) && this.a(pathpoint2) && this.a(pathpoint5)) {
+            apathpoint[i++] = pathpoint8;
+        }
+
+        PathPoint pathpoint9 = this.a(pathpoint.a + 1, pathpoint.b + 1, pathpoint.c);
+
+        if (this.b(pathpoint9) && this.a(pathpoint3) && this.a(pathpoint5)) {
+            apathpoint[i++] = pathpoint9;
+        }
+
+        PathPoint pathpoint10 = this.a(pathpoint.a, pathpoint.b + 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint10) && this.a(pathpoint4) && this.a(pathpoint5)) {
+            apathpoint[i++] = pathpoint10;
+        }
+
+        PathPoint pathpoint11 = this.a(pathpoint.a, pathpoint.b - 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint11) && this.a(pathpoint1) && this.a(pathpoint6)) {
+            apathpoint[i++] = pathpoint11;
+        }
+
+        PathPoint pathpoint12 = this.a(pathpoint.a - 1, pathpoint.b - 1, pathpoint.c);
+
+        if (this.b(pathpoint12) && this.a(pathpoint2) && this.a(pathpoint6)) {
+            apathpoint[i++] = pathpoint12;
+        }
+
+        PathPoint pathpoint13 = this.a(pathpoint.a + 1, pathpoint.b - 1, pathpoint.c);
+
+        if (this.b(pathpoint13) && this.a(pathpoint3) && this.a(pathpoint6)) {
+            apathpoint[i++] = pathpoint13;
+        }
+
+        PathPoint pathpoint14 = this.a(pathpoint.a, pathpoint.b - 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint14) && this.a(pathpoint4) && this.a(pathpoint6)) {
+            apathpoint[i++] = pathpoint14;
+        }
+
+        PathPoint pathpoint15 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c - 1);
+
+        if (this.b(pathpoint15) && this.a(pathpoint4) && this.a(pathpoint3)) {
+            apathpoint[i++] = pathpoint15;
+        }
+
+        PathPoint pathpoint16 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c + 1);
+
+        if (this.b(pathpoint16) && this.a(pathpoint1) && this.a(pathpoint3)) {
+            apathpoint[i++] = pathpoint16;
+        }
+
+        PathPoint pathpoint17 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c - 1);
+
+        if (this.b(pathpoint17) && this.a(pathpoint4) && this.a(pathpoint2)) {
+            apathpoint[i++] = pathpoint17;
+        }
+
+        PathPoint pathpoint18 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c + 1);
+
+        if (this.b(pathpoint18) && this.a(pathpoint1) && this.a(pathpoint2)) {
+            apathpoint[i++] = pathpoint18;
+        }
+
+        PathPoint pathpoint19 = this.a(pathpoint.a + 1, pathpoint.b + 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint19) && this.a(pathpoint15) && this.a(pathpoint4) && this.a(pathpoint3) && this.a(pathpoint5) && this.a(pathpoint10) && this.a(pathpoint9)) {
+            apathpoint[i++] = pathpoint19;
+        }
+
+        PathPoint pathpoint20 = this.a(pathpoint.a + 1, pathpoint.b + 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint20) && this.a(pathpoint16) && this.a(pathpoint1) && this.a(pathpoint3) && this.a(pathpoint5) && this.a(pathpoint7) && this.a(pathpoint9)) {
+            apathpoint[i++] = pathpoint20;
+        }
+
+        PathPoint pathpoint21 = this.a(pathpoint.a - 1, pathpoint.b + 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint21) && this.a(pathpoint17) && this.a(pathpoint4) && this.a(pathpoint2) & this.a(pathpoint5) && this.a(pathpoint10) && this.a(pathpoint8)) {
+            apathpoint[i++] = pathpoint21;
+        }
+
+        PathPoint pathpoint22 = this.a(pathpoint.a - 1, pathpoint.b + 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint22) && this.a(pathpoint18) && this.a(pathpoint1) && this.a(pathpoint2) & this.a(pathpoint5) && this.a(pathpoint7) && this.a(pathpoint8)) {
+            apathpoint[i++] = pathpoint22;
+        }
+
+        PathPoint pathpoint23 = this.a(pathpoint.a + 1, pathpoint.b - 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint23) && this.a(pathpoint15) && this.a(pathpoint4) && this.a(pathpoint3) && this.a(pathpoint6) && this.a(pathpoint14) && this.a(pathpoint13)) {
+            apathpoint[i++] = pathpoint23;
+        }
+
+        PathPoint pathpoint24 = this.a(pathpoint.a + 1, pathpoint.b - 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint24) && this.a(pathpoint16) && this.a(pathpoint1) && this.a(pathpoint3) && this.a(pathpoint6) && this.a(pathpoint11) && this.a(pathpoint13)) {
+            apathpoint[i++] = pathpoint24;
+        }
+
+        PathPoint pathpoint25 = this.a(pathpoint.a - 1, pathpoint.b - 1, pathpoint.c - 1);
+
+        if (this.b(pathpoint25) && this.a(pathpoint17) && this.a(pathpoint4) && this.a(pathpoint2) && this.a(pathpoint6) && this.a(pathpoint14) && this.a(pathpoint12)) {
+            apathpoint[i++] = pathpoint25;
+        }
+
+        PathPoint pathpoint26 = this.a(pathpoint.a - 1, pathpoint.b - 1, pathpoint.c + 1);
+
+        if (this.b(pathpoint26) && this.a(pathpoint18) && this.a(pathpoint1) && this.a(pathpoint2) && this.a(pathpoint6) && this.a(pathpoint11) && this.a(pathpoint12)) {
+            apathpoint[i++] = pathpoint26;
+        }
+
+        return i;
+    }
+
+    private boolean a(@Nullable PathPoint pathpoint) {
+        return pathpoint != null && pathpoint.k >= 0.0F;
+    }
+
+    private boolean b(@Nullable PathPoint pathpoint) {
+        return pathpoint != null && !pathpoint.i;
+    }
+
+    @Nullable
+    @Override
+    protected PathPoint a(int i, int j, int k) {
+        PathPoint pathpoint = null;
+        PathType pathtype = this.a(this.b, i, j, k);
+        float f = this.b.a(pathtype);
+
+        if (f >= 0.0F) {
+            pathpoint = super.a(i, j, k);
+            pathpoint.l = pathtype;
+            pathpoint.k = Math.max(pathpoint.k, f);
+            if (pathtype == PathType.WALKABLE) {
+                ++pathpoint.k;
+            }
+        }
+
+        return pathtype != PathType.OPEN && pathtype != PathType.WALKABLE ? pathpoint : pathpoint;
+    }
+
+    @Override
+    public PathType a(IBlockAccess iblockaccess, int i, int j, int k, EntityInsentient entityinsentient, int l, int i1, int j1, boolean flag, boolean flag1) {
+        EnumSet<PathType> enumset = EnumSet.noneOf(PathType.class);
+        PathType pathtype = PathType.BLOCKED;
+        BlockPosition blockposition = entityinsentient.getChunkCoordinates();
+
+        pathtype = this.a(iblockaccess, i, j, k, l, i1, j1, flag, flag1, enumset, pathtype, blockposition);
+        if (enumset.contains(PathType.FENCE)) {
+            return PathType.FENCE;
+        } else {
+            PathType pathtype1 = PathType.BLOCKED;
+            Iterator iterator = enumset.iterator();
+
+            while (iterator.hasNext()) {
+                PathType pathtype2 = (PathType) iterator.next();
+
+                if (entityinsentient.a(pathtype2) < 0.0F) {
+                    return pathtype2;
+                }
+
+                if (entityinsentient.a(pathtype2) >= entityinsentient.a(pathtype1)) {
+                    pathtype1 = pathtype2;
+                }
+            }
+
+            if (pathtype == PathType.OPEN && entityinsentient.a(pathtype1) == 0.0F) {
+                return PathType.OPEN;
+            } else {
+                return pathtype1;
+            }
+        }
+    }
+
+    @Override
+    public PathType a(IBlockAccess iblockaccess, int i, int j, int k) {
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+        PathType pathtype = b(iblockaccess, blockposition_mutableblockposition.d(i, j, k));
+
+        if (pathtype == PathType.OPEN && j >= 1) {
+            IBlockData iblockdata = iblockaccess.getType(blockposition_mutableblockposition.d(i, j - 1, k));
+            PathType pathtype1 = b(iblockaccess, blockposition_mutableblockposition.d(i, j - 1, k));
+
+            if (pathtype1 != PathType.DAMAGE_FIRE && !iblockdata.a(Blocks.MAGMA_BLOCK) && pathtype1 != PathType.LAVA && !iblockdata.a((Tag) TagsBlock.CAMPFIRES)) {
+                if (pathtype1 == PathType.DAMAGE_CACTUS) {
+                    pathtype = PathType.DAMAGE_CACTUS;
+                } else if (pathtype1 == PathType.DAMAGE_OTHER) {
+                    pathtype = PathType.DAMAGE_OTHER;
+                } else if (pathtype1 == PathType.COCOA) {
+                    pathtype = PathType.COCOA;
+                } else if (pathtype1 == PathType.FENCE) {
+                    pathtype = PathType.FENCE;
+                } else {
+                    pathtype = pathtype1 != PathType.WALKABLE && pathtype1 != PathType.OPEN && pathtype1 != PathType.WATER ? PathType.WALKABLE : PathType.OPEN;
+                }
+            } else {
+                pathtype = PathType.DAMAGE_FIRE;
+            }
+        }
+
+        if (pathtype == PathType.WALKABLE || pathtype == PathType.OPEN) {
+            pathtype = a(iblockaccess, blockposition_mutableblockposition.d(i, j, k), pathtype);
+        }
+
+        return pathtype;
+    }
+
+    private PathType a(EntityInsentient entityinsentient, BlockPosition blockposition) {
+        return this.a(entityinsentient, blockposition.getX(), blockposition.getY(), blockposition.getZ());
+    }
+
+    private PathType a(EntityInsentient entityinsentient, int i, int j, int k) {
+        return this.a(this.a, i, j, k, entityinsentient, this.d, this.e, this.f, this.d(), this.c());
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java
new file mode 100644
index 0000000000000000000000000000000000000000..86d849567cc6bc09f33716001ce4a2e8b7bd6188
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java
@@ -0,0 +1,285 @@
+package net.minecraft.world.level.pathfinder;
+
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPosition;
+import net.minecraft.core.EnumDirection;
+import net.minecraft.tags.Tag;
+import net.minecraft.tags.TagsBlock;
+import net.minecraft.util.MathHelper;
+import net.minecraft.world.entity.EntityInsentient;
+import net.minecraft.world.level.ChunkCache;
+import net.minecraft.world.level.IBlockAccess;
+import net.minecraft.world.level.block.BlockMinecartTrackAbstract;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.phys.AxisAlignedBB;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class PathfinderTurtle extends PathfinderNormal {
+
+    private float k;
+    private float l;
+
+    public PathfinderTurtle() {}
+
+    @Override
+    public void a(ChunkCache chunkcache, EntityInsentient entityinsentient) {
+        super.a(chunkcache, entityinsentient);
+        entityinsentient.a(PathType.WATER, 0.0F);
+        this.k = entityinsentient.a(PathType.WALKABLE);
+        entityinsentient.a(PathType.WALKABLE, 6.0F);
+        this.l = entityinsentient.a(PathType.WATER_BORDER);
+        entityinsentient.a(PathType.WATER_BORDER, 4.0F);
+    }
+
+    @Override
+    public void a() {
+        this.b.a(PathType.WALKABLE, this.k);
+        this.b.a(PathType.WATER_BORDER, this.l);
+        super.a();
+    }
+
+    @Override
+    public PathPoint b() {
+        return this.a(MathHelper.floor(this.b.getBoundingBox().minX), MathHelper.floor(this.b.getBoundingBox().minY + 0.5D), MathHelper.floor(this.b.getBoundingBox().minZ));
+    }
+
+    @Override
+    public PathDestination a(double d0, double d1, double d2) {
+        return new PathDestination(this.a(MathHelper.floor(d0), MathHelper.floor(d1 + 0.5D), MathHelper.floor(d2)));
+    }
+
+    @Override
+    public int a(PathPoint[] apathpoint, PathPoint pathpoint) {
+        int i = 0;
+        boolean flag = true;
+        BlockPosition blockposition = new BlockPosition(pathpoint.a, pathpoint.b, pathpoint.c);
+        double d0 = this.b(blockposition);
+        PathPoint pathpoint1 = this.a(pathpoint.a, pathpoint.b, pathpoint.c + 1, 1, d0);
+        PathPoint pathpoint2 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c, 1, d0);
+        PathPoint pathpoint3 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c, 1, d0);
+        PathPoint pathpoint4 = this.a(pathpoint.a, pathpoint.b, pathpoint.c - 1, 1, d0);
+        PathPoint pathpoint5 = this.a(pathpoint.a, pathpoint.b + 1, pathpoint.c, 0, d0);
+        PathPoint pathpoint6 = this.a(pathpoint.a, pathpoint.b - 1, pathpoint.c, 1, d0);
+
+        if (pathpoint1 != null && !pathpoint1.i) {
+            apathpoint[i++] = pathpoint1;
+        }
+
+        if (pathpoint2 != null && !pathpoint2.i) {
+            apathpoint[i++] = pathpoint2;
+        }
+
+        if (pathpoint3 != null && !pathpoint3.i) {
+            apathpoint[i++] = pathpoint3;
+        }
+
+        if (pathpoint4 != null && !pathpoint4.i) {
+            apathpoint[i++] = pathpoint4;
+        }
+
+        if (pathpoint5 != null && !pathpoint5.i) {
+            apathpoint[i++] = pathpoint5;
+        }
+
+        if (pathpoint6 != null && !pathpoint6.i) {
+            apathpoint[i++] = pathpoint6;
+        }
+
+        boolean flag1 = pathpoint4 == null || pathpoint4.l == PathType.OPEN || pathpoint4.k != 0.0F;
+        boolean flag2 = pathpoint1 == null || pathpoint1.l == PathType.OPEN || pathpoint1.k != 0.0F;
+        boolean flag3 = pathpoint3 == null || pathpoint3.l == PathType.OPEN || pathpoint3.k != 0.0F;
+        boolean flag4 = pathpoint2 == null || pathpoint2.l == PathType.OPEN || pathpoint2.k != 0.0F;
+        PathPoint pathpoint7;
+
+        if (flag1 && flag4) {
+            pathpoint7 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c - 1, 1, d0);
+            if (pathpoint7 != null && !pathpoint7.i) {
+                apathpoint[i++] = pathpoint7;
+            }
+        }
+
+        if (flag1 && flag3) {
+            pathpoint7 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c - 1, 1, d0);
+            if (pathpoint7 != null && !pathpoint7.i) {
+                apathpoint[i++] = pathpoint7;
+            }
+        }
+
+        if (flag2 && flag4) {
+            pathpoint7 = this.a(pathpoint.a - 1, pathpoint.b, pathpoint.c + 1, 1, d0);
+            if (pathpoint7 != null && !pathpoint7.i) {
+                apathpoint[i++] = pathpoint7;
+            }
+        }
+
+        if (flag2 && flag3) {
+            pathpoint7 = this.a(pathpoint.a + 1, pathpoint.b, pathpoint.c + 1, 1, d0);
+            if (pathpoint7 != null && !pathpoint7.i) {
+                apathpoint[i++] = pathpoint7;
+            }
+        }
+
+        return i;
+    }
+
+    private double b(BlockPosition blockposition) {
+        if (!this.b.isInWater()) {
+            BlockPosition blockposition1 = blockposition.down();
+            VoxelShape voxelshape = this.a.getType(blockposition1).getCollisionShape(this.a, blockposition1);
+
+            return (double) blockposition1.getY() + (voxelshape.isEmpty() ? 0.0D : voxelshape.c(EnumDirection.EnumAxis.Y));
+        } else {
+            return (double) blockposition.getY() + 0.5D;
+        }
+    }
+
+    @Nullable
+    private PathPoint a(int i, int j, int k, int l, double d0) {
+        PathPoint pathpoint = null;
+        BlockPosition blockposition = new BlockPosition(i, j, k);
+        double d1 = this.b(blockposition);
+
+        if (d1 - d0 > 1.125D) {
+            return null;
+        } else {
+            PathType pathtype = this.a(this.a, i, j, k, this.b, this.d, this.e, this.f, false, false);
+            float f = this.b.a(pathtype);
+            double d2 = (double) this.b.getWidth() / 2.0D;
+
+            if (f >= 0.0F) {
+                pathpoint = this.a(i, j, k);
+                pathpoint.l = pathtype;
+                pathpoint.k = Math.max(pathpoint.k, f);
+            }
+
+            if (pathtype != PathType.WATER && pathtype != PathType.WALKABLE) {
+                if (pathpoint == null && l > 0 && pathtype != PathType.FENCE && pathtype != PathType.UNPASSABLE_RAIL && pathtype != PathType.TRAPDOOR) {
+                    pathpoint = this.a(i, j + 1, k, l - 1, d0);
+                }
+
+                if (pathtype == PathType.OPEN) {
+                    AxisAlignedBB axisalignedbb = new AxisAlignedBB((double) i - d2 + 0.5D, (double) j + 0.001D, (double) k - d2 + 0.5D, (double) i + d2 + 0.5D, (double) ((float) j + this.b.getHeight()), (double) k + d2 + 0.5D);
+
+                    if (!this.b.world.getCubes(this.b, axisalignedbb)) {
+                        return null;
+                    }
+
+                    PathType pathtype1 = this.a(this.a, i, j - 1, k, this.b, this.d, this.e, this.f, false, false);
+
+                    if (pathtype1 == PathType.BLOCKED) {
+                        pathpoint = this.a(i, j, k);
+                        pathpoint.l = PathType.WALKABLE;
+                        pathpoint.k = Math.max(pathpoint.k, f);
+                        return pathpoint;
+                    }
+
+                    if (pathtype1 == PathType.WATER) {
+                        pathpoint = this.a(i, j, k);
+                        pathpoint.l = PathType.WATER;
+                        pathpoint.k = Math.max(pathpoint.k, f);
+                        return pathpoint;
+                    }
+
+                    int i1 = 0;
+
+                    while (j > 0 && pathtype == PathType.OPEN) {
+                        --j;
+                        if (i1++ >= this.b.bP()) {
+                            return null;
+                        }
+
+                        pathtype = this.a(this.a, i, j, k, this.b, this.d, this.e, this.f, false, false);
+                        f = this.b.a(pathtype);
+                        if (pathtype != PathType.OPEN && f >= 0.0F) {
+                            pathpoint = this.a(i, j, k);
+                            pathpoint.l = pathtype;
+                            pathpoint.k = Math.max(pathpoint.k, f);
+                            break;
+                        }
+
+                        if (f < 0.0F) {
+                            return null;
+                        }
+                    }
+                }
+
+                return pathpoint;
+            } else {
+                if (j < this.b.world.getSeaLevel() - 10 && pathpoint != null) {
+                    ++pathpoint.k;
+                }
+
+                return pathpoint;
+            }
+        }
+    }
+
+    @Override
+    protected PathType a(IBlockAccess iblockaccess, boolean flag, boolean flag1, BlockPosition blockposition, PathType pathtype) {
+        if (pathtype == PathType.RAIL && !(iblockaccess.getType(blockposition).getBlock() instanceof BlockMinecartTrackAbstract) && !(iblockaccess.getType(blockposition.down()).getBlock() instanceof BlockMinecartTrackAbstract)) {
+            pathtype = PathType.UNPASSABLE_RAIL;
+        }
+
+        if (pathtype == PathType.DOOR_OPEN || pathtype == PathType.DOOR_WOOD_CLOSED || pathtype == PathType.DOOR_IRON_CLOSED) {
+            pathtype = PathType.BLOCKED;
+        }
+
+        if (pathtype == PathType.LEAVES) {
+            pathtype = PathType.BLOCKED;
+        }
+
+        return pathtype;
+    }
+
+    @Override
+    public PathType a(IBlockAccess iblockaccess, int i, int j, int k) {
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+        PathType pathtype = b(iblockaccess, blockposition_mutableblockposition.d(i, j, k));
+
+        if (pathtype == PathType.WATER) {
+            EnumDirection[] aenumdirection = EnumDirection.values();
+            int l = aenumdirection.length;
+
+            for (int i1 = 0; i1 < l; ++i1) {
+                EnumDirection enumdirection = aenumdirection[i1];
+                PathType pathtype1 = b(iblockaccess, blockposition_mutableblockposition.d(i, j, k).c(enumdirection));
+
+                if (pathtype1 == PathType.BLOCKED) {
+                    return PathType.WATER_BORDER;
+                }
+            }
+
+            return PathType.WATER;
+        } else {
+            if (pathtype == PathType.OPEN && j >= 1) {
+                IBlockData iblockdata = iblockaccess.getType(new BlockPosition(i, j - 1, k));
+                PathType pathtype2 = b(iblockaccess, blockposition_mutableblockposition.d(i, j - 1, k));
+
+                if (pathtype2 != PathType.WALKABLE && pathtype2 != PathType.OPEN && pathtype2 != PathType.LAVA) {
+                    pathtype = PathType.WALKABLE;
+                } else {
+                    pathtype = PathType.OPEN;
+                }
+
+                if (pathtype2 == PathType.DAMAGE_FIRE || iblockdata.a(Blocks.MAGMA_BLOCK) || iblockdata.a((Tag) TagsBlock.CAMPFIRES)) {
+                    pathtype = PathType.DAMAGE_FIRE;
+                }
+
+                if (pathtype2 == PathType.DAMAGE_CACTUS) {
+                    pathtype = PathType.DAMAGE_CACTUS;
+                }
+
+                if (pathtype2 == PathType.DAMAGE_OTHER) {
+                    pathtype = PathType.DAMAGE_OTHER;
+                }
+            }
+
+            if (pathtype == PathType.WALKABLE) {
+                pathtype = a(iblockaccess, blockposition_mutableblockposition.d(i, j, k), pathtype);
+            }
+
+            return pathtype;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java
new file mode 100644
index 0000000000000000000000000000000000000000..cd5676aa4a2bce60a57e91c2eb0b88e97ee626f1
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java
@@ -0,0 +1,118 @@
+package net.minecraft.world.level.pathfinder;
+
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPosition;
+import net.minecraft.core.EnumDirection;
+import net.minecraft.tags.Tag;
+import net.minecraft.tags.TagsFluid;
+import net.minecraft.util.MathHelper;
+import net.minecraft.world.entity.EntityInsentient;
+import net.minecraft.world.level.IBlockAccess;
+import net.minecraft.world.level.block.state.IBlockData;
+import net.minecraft.world.level.material.Fluid;
+
+public class PathfinderWater extends PathfinderAbstract {
+
+    private final boolean j;
+
+    public PathfinderWater(boolean flag) {
+        this.j = flag;
+    }
+
+    @Override
+    public PathPoint b() {
+        return super.a(MathHelper.floor(this.b.getBoundingBox().minX), MathHelper.floor(this.b.getBoundingBox().minY + 0.5D), MathHelper.floor(this.b.getBoundingBox().minZ));
+    }
+
+    @Override
+    public PathDestination a(double d0, double d1, double d2) {
+        return new PathDestination(super.a(MathHelper.floor(d0 - (double) (this.b.getWidth() / 2.0F)), MathHelper.floor(d1 + 0.5D), MathHelper.floor(d2 - (double) (this.b.getWidth() / 2.0F))));
+    }
+
+    @Override
+    public int a(PathPoint[] apathpoint, PathPoint pathpoint) {
+        int i = 0;
+        EnumDirection[] aenumdirection = EnumDirection.values();
+        int j = aenumdirection.length;
+
+        for (int k = 0; k < j; ++k) {
+            EnumDirection enumdirection = aenumdirection[k];
+            PathPoint pathpoint1 = this.b(pathpoint.a + enumdirection.getAdjacentX(), pathpoint.b + enumdirection.getAdjacentY(), pathpoint.c + enumdirection.getAdjacentZ());
+
+            if (pathpoint1 != null && !pathpoint1.i) {
+                apathpoint[i++] = pathpoint1;
+            }
+        }
+
+        return i;
+    }
+
+    @Override
+    public PathType a(IBlockAccess iblockaccess, int i, int j, int k, EntityInsentient entityinsentient, int l, int i1, int j1, boolean flag, boolean flag1) {
+        return this.a(iblockaccess, i, j, k);
+    }
+
+    @Override
+    public PathType a(IBlockAccess iblockaccess, int i, int j, int k) {
+        BlockPosition blockposition = new BlockPosition(i, j, k);
+        Fluid fluid = iblockaccess.getFluid(blockposition);
+        IBlockData iblockdata = iblockaccess.getType(blockposition);
+
+        return fluid.isEmpty() && iblockdata.a(iblockaccess, blockposition.down(), PathMode.WATER) && iblockdata.isAir() ? PathType.BREACH : (fluid.a((Tag) TagsFluid.WATER) && iblockdata.a(iblockaccess, blockposition, PathMode.WATER) ? PathType.WATER : PathType.BLOCKED);
+    }
+
+    @Nullable
+    private PathPoint b(int i, int j, int k) {
+        PathType pathtype = this.c(i, j, k);
+
+        return (!this.j || pathtype != PathType.BREACH) && pathtype != PathType.WATER ? null : this.a(i, j, k);
+    }
+
+    @Nullable
+    @Override
+    protected PathPoint a(int i, int j, int k) {
+        PathPoint pathpoint = null;
+        PathType pathtype = this.a(this.b.world, i, j, k);
+        float f = this.b.a(pathtype);
+
+        if (f >= 0.0F) {
+            pathpoint = super.a(i, j, k);
+            pathpoint.l = pathtype;
+            pathpoint.k = Math.max(pathpoint.k, f);
+            if (this.a.getFluid(new BlockPosition(i, j, k)).isEmpty()) {
+                pathpoint.k += 8.0F;
+            }
+        }
+
+        return pathtype == PathType.OPEN ? pathpoint : pathpoint;
+    }
+
+    private PathType c(int i, int j, int k) {
+        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
+
+        for (int l = i; l < i + this.d; ++l) {
+            for (int i1 = j; i1 < j + this.e; ++i1) {
+                for (int j1 = k; j1 < k + this.f; ++j1) {
+                    Fluid fluid = this.a.getFluid(blockposition_mutableblockposition.d(l, i1, j1));
+                    IBlockData iblockdata = this.a.getType(blockposition_mutableblockposition.d(l, i1, j1));
+
+                    if (fluid.isEmpty() && iblockdata.a((IBlockAccess) this.a, blockposition_mutableblockposition.down(), PathMode.WATER) && iblockdata.isAir()) {
+                        return PathType.BREACH;
+                    }
+
+                    if (!fluid.a((Tag) TagsFluid.WATER)) {
+                        return PathType.BLOCKED;
+                    }
+                }
+            }
+        }
+
+        IBlockData iblockdata1 = this.a.getType(blockposition_mutableblockposition);
+
+        if (iblockdata1.a((IBlockAccess) this.a, blockposition_mutableblockposition, PathMode.WATER)) {
+            return PathType.WATER;
+        } else {
+            return PathType.BLOCKED;
+        }
+    }
+}
